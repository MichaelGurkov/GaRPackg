names(object)
devtools::load_all(".")
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel_yoy")))
names(object)
names(object)
names(object)
devtools::load_all(".")
names(object)
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel_yoy")))
names(object)
devtools::load_all(".")
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel_yoy")))
names(object)
devtools::load_all(".")
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel_yoy")))
names(object)
names(gar_data)
names(object)
expected = gar_data %>%
preprocess_df(vars_to_yoy = "ind_prod_israel"))
expected = gar_data %>%
preprocess_df(vars_to_yoy = "ind_prod_israel")
expected = gar_data %>%
preprocess_df(vars_to_yoy = "ind_prod_israel") %>%
inner_join(select(gar_data, c(date, gdp)), by = "date")
head(expected)
test_that("preprocess returns mixed df in case of some vars transformations",{
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel_yoy"))),
expected = gar_data %>%
preprocess_df(vars_to_yoy = "ind_prod_israel") %>%
inner_join(select(gar_data, c(date, gdp)), by = "date"))})
devtools::load_all(".")
devtools::test()
data("gar_data")
gar_data = gar_data %>%
dplyr::mutate(date = as.yearqtr(date))
expected_transformed_df = list(
gar_data %>%
dplyr::mutate(across(
c("gdp", "ind_prod_israel"),
list(yoy = ~ (. / lag(., 4) - 1)))) %>%
select(date, gdp_yoy, ind_prod_israel_yoy),
gar_data %>%
dplyr::mutate(across(
c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1)))) %>%
select(date, gdp_percent_change, ind_prod_israel_percent_change),
gar_data %>%
dplyr::mutate(across(
c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
select(date, gdp_diff, ind_prod_israel_diff),
gar_data %>%
dplyr::mutate(across(
c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(
., mean, .before = 3,
.complete = TRUE
)))) %>%
select(date, gdp_4_ma, ind_prod_israel_4_ma)) %>%
reduce(full_join, by = "date") %>%
filter(complete.cases(.))
test_that("all preprocess transformations work", {
expect_equal(
object = gar_data %>%
preprocess_df(
vars_to_yoy = c("gdp", "ind_prod_israel"),
vars_to_percent_change = c("gdp", "ind_prod_israel"),
vars_to_diff = c("gdp", "ind_prod_israel"),
vars_to_4_ma = c("gdp", "ind_prod_israel")),
expected = expected_transformed_df)})
partitions_list = list(first = c("gdp_yoy", "ind_prod_israel_yoy"),
second = c("gdp_percent_change",
"ind_prod_israel_percent_change"),
third = c("gdp_diff", "ind_prod_israel_diff"),
fourth = c("gdp_4_ma", "ind_prod_israel_4_ma"))
test_that("all preprocess transformations work with partition list",{
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list = partitions_list),
expected = expected_transformed_df)})
test_that("preprocess returns raw df in case of no transformations",{
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel"))),
expected = gar_data)})
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel")))
test_that("preprocess returns raw df in case of no transformations",{
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list =
list(dom_macro = c("gdp","ind_prod_israel"))),
expected = gar_data %>%
select(c("date","gdp","ind_prod_israel")))})
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
names(gar_data)
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_percent_change = NULL,
vars_to_diff = c("rate_euro","rate_us"),
vars_to_4_ma = NULL)
extract_preprocess_arguments(temp_part)
devtools::load_all(".")
# Chunk 1: load_libraries
library(tidyverse)
devtools::load_all()
library(furrr)
# Chunk 2: Import_data
raw_df = import_from_fame_template(
paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI\\GaR_Data",
"\\robustness\\data_GaR_20220904.csv")) %>%
rename_all(tolower)
raw_df = raw_df %>%
select(-starts_with("staff"), -starts_with("dsge"))
raw_df = raw_df %>%
filter(date >= as.yearqtr("2000 Q1") & date <= as.yearqtr("2022 Q2"))
# Chunk 3: get_all_combinations_test
categories_list = list(
dom_macro = list(
required = c("gdp_yoy"),
optional = c(
"unemployment_diff",
"cpi_israel_yoy"
)),
dom_fin = list(
required = c(
"credit_yoy",
"house_price_yoy",
"ta125_close_yoy",
"boi_rate_diff"
),
optional = c(
"spread_cpi_corp",
"sovereigh_spread",
"term_spread",
"ils_usd_impl_vol",
"ta_35_impl_vol"
)),
ext_macro = list(
required = c(
"gdp_us_yoy",
"gdp_euro_yoy"
),
optional = c(
"cpi_us_yoy",
"infl_euro_4_ma",
"ind_prod_us_yoy",
"ind_prod_euro_yoy",
"oecd_imp"
)),
ext_fin = list(
required = c(
"rate_euro_diff",
"rate_us_diff"
),
optional = c(
"eurostoxx600",
"sp500",
"us_term_spread",
"dxy_yoy",
"oil_p_yoy",
"non_energy_p_yoy"
)
)
)
category_params_df =  categories_list%>%
enframe(name = "category", value = "params") %>%
mutate(part_comb_df = map2(category, params,
function(temp_name, temp_part) {
temp_part_df = get_partition_combs(partitions_list = temp_part,
partition_name = temp_name)
}))
feature_select_df = map(
category_params_df$category,function(temp_cat){
temp_df = category_params_df %>%
filter(category == temp_cat) %>%
select(part_comb_df) %>%
unnest(cols = c(part_comb_df))
return(temp_df)
}
) %>%
reduce(full_join, by = character()) %>%
unite(col = name,starts_with("name"),sep = "-") %>%
mutate(partition = pmap(list(dom_macro,dom_fin,ext_macro,ext_fin),c))
rm(category_params_df)
forecast_results = feature_select_df %>%
select(partition) %>%
slice(1) %>%
mutate(gar_forecast = map(partition, function(temp_part){s
vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
processed_df = raw_df %>%
preprocess_df(vars_to_yoy = vars_to_yoy,
vars_to_diff = vars_to_diff,
vars_to_4_ma = vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_res = get_gar_forecast(partitions_list = temp_part,
vars_df = processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
return(temp_res)
}))
forecast_results = feature_select_df %>%
select(partition) %>%
slice(1) %>%
mutate(gar_forecast = map(partition, function(temp_part){
vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
processed_df = raw_df %>%
preprocess_df(vars_to_yoy = vars_to_yoy,
vars_to_diff = vars_to_diff,
vars_to_4_ma = vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_res = get_gar_forecast(partitions_list = temp_part,
vars_df = processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
return(temp_res)
}))
forecast_results = feature_select_df %>%
select(partition) %>%
slice(1) %>%
mutate(gar_forecast = map(partition, function(temp_part){
vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
browser()
processed_df = raw_df %>%
preprocess_df(vars_to_yoy = vars_to_yoy,
vars_to_diff = vars_to_diff,
vars_to_4_ma = vars_to_ma) %>%
select("date","gdp_yoy",
all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_res = get_gar_forecast(partitions_list = temp_part,
vars_df = processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
return(temp_res)
}))
processed_df = raw_df %>%
preprocess_df(vars_to_yoy = vars_to_yoy,
vars_to_diff = vars_to_diff,
vars_to_4_ma = vars_to_ma)
names(processed_df)
unlist(temp_part,use.names = FALSE))
unlist(temp_part,use.names = FALSE)
forecast_results = feature_select_df %>%
select(partition) %>%
slice(1) %>%
mutate(gar_forecast = map(partition, function(temp_part){
temp_res = get_gar_forecast(partitions_list = temp_part,
vars_df = processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
return(temp_res)
}))
forecast_results = feature_select_df %>%
select(partition) %>%
slice(1) %>%
mutate(gar_forecast = map(partition, function(temp_part){
temp_res = get_gar_forecast(partitions_list = temp_part,
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
return(temp_res)
}))
global_actual_df = raw_df %>%
preprocess_df(vars_to_yoy = "gdp") %>%
select(date, gdp_yoy) %>%
filter(complete.cases(.))
global_benchmark_df = get_gar_forecast(partitions_list = NULL,
vars_df = raw_df %>%
preprocess_df(vars_to_yoy = "gdp"),
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
names(forecast_results)
forecast_results %>%
mutate(id = map_chr(partition,function(temp_str){
return(paste0(unlist(temp_str), collapse = "-"))
})) %>%
mutate(r2_score = map(gar_forecast, function(temp_forecast_df){
r2_score = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
return(r2_score)
}))
forecast_results = forecast_results %>%
mutate(id = map_chr(partition,function(temp_str){
return(paste0(unlist(temp_str), collapse = "-"))
})) %>%
mutate(r2_score = map(gar_forecast, function(temp_forecast_df){
r2_score = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
return(r2_score)
}))
scores_df = read_csv(paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI",
"\\GaR_Data\\robustness\\scores.csv"),
show_col_types = FALSE) %>%
select(-partition)
forecast_results$id
scores_df %>%
filter(id == forecast_results$id)
temp_id = forecast_results$id
scores_df %>%
filter(id == temp_id)
temp_id = scores_df %>%
slice(3) %>%
pull(id)
scores_df %>%
filter(id == temp_id)
match_partition_from_id = function(temp_id, categories_list){
get_vars_from_category = function(str_vec, id_str){
temp_res = unlist(map(str_vec, function(temp_str){
return(intersect(temp_str, id_str))
}),
use.names = FALSE)
return(temp_res)
}
temp_part = map(categories_list,get_vars_from_category,
id_str = unlist(temp_id))
return(temp_part)
}
temp_part = match_partition_from_id(temp_id, categories_list)
temp_part
temp_id
categories_list
match_partition_from_id = function(temp_id, categories_list){
get_vars_from_category = function(str_vec, id_str){
temp_res = unlist(map(str_vec, function(temp_str){
return(intersect(temp_str, id_str))
}),
use.names = FALSE)
return(temp_res)
}
temp_part = map(categories_list,get_vars_from_category,
id_str = unlist(temp_id))
return(temp_part)
}
temp_part = match_partition_from_id(temp_id, categories_list)
temp_id
categories_list
temp_part
best_models = read_csv(paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI",
"\\GaR_Data\\robustness\\best_models.csv"))
best_models
View(best_models)
rm(best_models)
temp_id = scores_df %>%
slice(1) %>%
pull(id) %>%
str_split(pattern = "-")
match_partition_from_id = function(temp_id, categories_list){
get_vars_from_category = function(str_vec, id_str){
temp_res = unlist(map(str_vec, function(temp_str){
return(intersect(temp_str, id_str))
}),
use.names = FALSE)
return(temp_res)
}
temp_part = map(categories_list,get_vars_from_category,
id_str = unlist(temp_id))
return(temp_part)
}
temp_part = match_partition_from_id(temp_id, categories_list)
temp_part
temp_model = run_GaR_analysis(partitions_list = temp_part,
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_forecast = get_gar_forecast(partitions_list = temp_part,
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_benchmark = get_gar_forecast(partitions_list = NULL,
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
quantile_r2_score(forecast_df = temp_forecast)
temp_actual_df = raw_df %>%
preprocess_df(vars_to_yoy = "gdp")
temp_actual_df
quantile_r2_score(forecast_df = temp_forecast,actual_df = temp_actual_df,
benchmark_df = temp_benchmark)
scores_df %>%
slice(1)
scores_df %>%
filter(id == id[1])
quantile_pit_score(forecast_df = temp_forecast,actual_df = temp_actual_df,
benchmark_df = temp_benchmark)
quantile_pit_score(forecast_df = temp_forecast,actual_df = temp_actual_df)
scores_df %>%
filter(id == id[1])
file.choose()
temp_results_df = read_csv(paste0("C:\\Users\\Home",
"\\OneDrive - Bank Of Israel\\Data",
"\\BoI\\GaR_Data\\robustness",
"\\forecast_results_1.rds"))
head(temp_results_df)
temp_results_df = read_rds(paste0("C:\\Users\\Home",
"\\OneDrive - Bank Of Israel\\Data",
"\\BoI\\GaR_Data\\robustness",
"\\forecast_results_1.rds"))
head(temp_results_df)
temp_results_df$partition[1]
temp_results_df$partition[[1]]
temp_model = run_GaR_analysis(partitions_list = temp_results_df$partition[[1]],
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
all.equal(temp_model, temp_results_df$gar_forecast[[1]])
temp_results_df$gar_forecast[[1]]
temp_model = get_gar_forecast(partitions_list = temp_results_df$partition[[1]],
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
all.equal(temp_model, temp_results_df$gar_forecast[[1]])
temp_results_df$partition[[1]]
# Chunk 1: load_libraries
library(tidyverse)
devtools::load_all()
library(furrr)
# Chunk 2: Import_data
raw_df = import_from_fame_template(
paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI\\GaR_Data",
"\\robustness\\data_GaR_20220904.csv")) %>%
rename_all(tolower)
raw_df = raw_df %>%
select(-starts_with("staff"), -starts_with("dsge"))
raw_df = raw_df %>%
filter(date >= as.yearqtr("2000 Q1") & date <= as.yearqtr("2022 Q2"))
temp_results_df = read_rds(paste0("C:\\Users\\Home",
"\\OneDrive - Bank Of Israel\\Data",
"\\BoI\\GaR_Data\\robustness",
"\\forecast_results_1.rds"))
temp_model = get_gar_forecast(partitions_list = temp_results_df$partition[[1]],
vars_df = raw_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_df = raw_df %>%
preprocess_df(partitions_list = temp_results_df$partition[[1]])
86*5
View(temp_df)
unlist(temp_results_df$partition[[1]])
unlist(temp_results_df$partition[[1]], use.names = FALSE)
