"\\GaR_Data\\robustness\\scores.csv"))
# Chunk 1: load_libraries
library(tidyverse)
devtools::load_all()
library(furrr)
raw_df = import_from_fame_template(
paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI\\GaR_Data",
"\\robustness\\data_GaR_20220904.csv")) %>%
rename_all(tolower)
raw_df = raw_df %>%
select(-starts_with("staff"), -starts_with("dsge"))
raw_df = raw_df %>%
filter(date >= as.yearqtr("2000 Q1") & date <= as.yearqtr("2022 Q2"))
scores_df = read_csv(paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI",
"\\GaR_Data\\robustness\\scores_a.csv"),
show_col_types = FALSE) %>%
select(-partition)
head(scores_df)
best_thresholds = scores_df %>%
group_bootstraps(quantile) %>%
summarise(threshold = quantile(quantile_r2,0.9), .groups = "drop")
best_thresholds = scores_df %>%
group_bootstraps(quantile) %>%
summarise(threshold = mean(quantile_r2), .groups = "drop")
best_thresholds = scores_df %>%
group_by(quantile) %>%
summarise(threshold = quantile(quantile_r2, 0.9), .groups = "drop")
best_thresholds
summary(scores_df$quantile_r2[scores_df$quantile == 0.25])
summary(scores_df$quantile_r2[scores_df$quantile == 0.5])
summary(scores_df$quantile_r2[scores_df$quantile == 0.75])
best_thresholds = scores_df %>%
group_by(quantile) %>%
summarise(threshold = quantile(quantile_r2, 0.95), .groups = "drop")
best_thresholds
categories_list = list(
dom_macro = list(
required = c("gdp_yoy"),
optional = c(
"unemployment_diff",
"cpi_israel_yoy"
)),
dom_fin = list(
required = c(
"credit_yoy",
"house_price_yoy",
"ta125_close_yoy",
"boi_rate_diff"
),
optional = c(
"spread_cpi_corp",
"sovereigh_spread",
"term_spread",
"ils_usd_impl_vol",
"ta_35_impl_vol"
)),
ext_macro = list(
required = c(
"gdp_us_yoy",
"gdp_euro_yoy"
),
optional = c(
"cpi_us_yoy",
"infl_euro_4_ma",
"ind_prod_us_yoy",
"ind_prod_euro_yoy",
"oecd_imp"
)),
ext_fin = list(
required = c(
"rate_euro_diff",
"rate_us_diff"
),
optional = c(
"eurostoxx600",
"sp500",
"us_term_spread",
"dxy_yoy",
"oil_p_yoy",
"non_energy_p_yoy"
)
)
)
category_params_df =  categories_list%>%
enframe(name = "category", value = "params") %>%
mutate(part_comb_df = map2(category, params,
function(temp_name, temp_part) {
temp_part_df = get_partition_combs(partitions_list = temp_part,
partition_name = temp_name)
}))
feature_select_df = map(
category_params_df$category,function(temp_cat){
temp_df = category_params_df %>%
filter(category == temp_cat) %>%
select(part_comb_df) %>%
unnest(cols = c(part_comb_df))
return(temp_df)
}
) %>%
reduce(full_join, by = character()) %>%
unite(col = name,starts_with("name"),sep = "-") %>%
mutate(partition = pmap(list(dom_macro,dom_fin,ext_macro,ext_fin),c))
temp_part = feature_select_df %>%
select(partition) %>%
mutate(id = map_chr(partition,~paste0(unlist(.), collapse = "-"))) %>%
filter(id %in% scores_df$id[c(1,5,100)])
temp_part
temp_part$partition[[1]]
temp_part$partition
walk(temp_part, print)
walk(temp_part$partition, print)
walk(temp_part$partition, function(temp_part){
browser()
temp_part = temp_part$partition[[1]]
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == id[1]) %>%
select(horizon, quantile, quantile_r2)
all.equal(temp_r2, benchmark_r2)
})
temp_part
names(temp_part)
walk2(temp_part$partition,c(1,5,100), function(temp_part, temp_ind){
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == temp_ind) %>%
select(horizon, quantile, quantile_r2)
print(all.equal(temp_r2, benchmark_r2))
})
scores_df$id[100]
temp_part$id
scores_df$id[1]
scores_df$id[5]
all.equal(scores_df$id[1],scores_df$id[5])
ind_vec = c(1,1000,100000)
temp_part = feature_select_df %>%
select(partition) %>%
mutate(id = map_chr(partition,~paste0(unlist(.), collapse = "-"))) %>%
filter(id %in% scores_df$id[ind_vec])
walk2(temp_part$partition,ind_vec, function(temp_part, temp_ind){
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == temp_ind) %>%
select(horizon, quantile, quantile_r2)
print(all.equal(temp_r2, benchmark_r2))
})
global_actual_df = raw_df %>%
preprocess_df(vars_to_yoy = "gdp") %>%
select(date, gdp_yoy) %>%
filter(complete.cases(.))
global_benchmark_df = get_gar_forecast(partitions_list = NULL,
vars_df = raw_df %>%
preprocess_df(vars_to_yoy = "gdp"),
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
walk2(temp_part$partition,ind_vec, function(temp_part, temp_ind){
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == temp_ind) %>%
select(horizon, quantile, quantile_r2)
print(all.equal(temp_r2, benchmark_r2))
})
walk2(temp_part$partition,ind_vec, function(temp_part, temp_ind){
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == temp_ind) %>%
select(horizon, quantile, quantile_r2)
browser()
print(all.equal(temp_r2, benchmark_r2))
})
temp_r2
benchmark_r2
global_actual_df
scores_df
temp_ind
scores_df %>%
filter(id == temp_ind)
walk2(temp_part$partition,ind_vec, function(temp_part, temp_ind){
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
slice(temp_ind) %>%
select(horizon, quantile, quantile_r2)
# browser()
print(all.equal(temp_r2, benchmark_r2))
})
walk2(temp_part$partition,ind_vec, function(temp_part, temp_ind){
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == id[temp_ind]) %>%
select(horizon, quantile, quantile_r2)
# browser()
print(all.equal(temp_r2, benchmark_r2))
})
walk2(temp_part$partition,ind_vec, function(temp_part, temp_ind){
browser()
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == id[temp_ind]) %>%
select(horizon, quantile, quantile_r2)
# browser()
print(all.equal(temp_r2, benchmark_r2))
})
nchar(paste0(unlist(temp_part), collapse = ""))
id[temp_ind]
scores_df$id[temp_ind]
nchar(scores_df$id[temp_ind])
nchar(paste0(unlist(temp_part), collapse = "-"))
temp_ind = 1000
temp_part = feature_select_df %>%
select(partition) %>%
mutate(id = map_chr(partition,~paste0(unlist(.), collapse = "-"))) %>%
filter(id == scores_df$id[temp_ind])
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_ind = 1000
temp_part = feature_select_df %>%
select(partition) %>%
mutate(id = map_chr(partition,~paste0(unlist(.), collapse = "-"))) %>%
filter(id == scores_df$id[temp_ind])
temp_part = temp_part$partition[[1]]
names(temp_part)
temp_vars_to_yoy = temp_part %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
temp_vars_to_diff = temp_part %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
temp_vars_to_ma = temp_part %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
temp_processed_df = raw_df %>%
preprocess_df(vars_to_yoy = temp_vars_to_yoy,
vars_to_diff = temp_vars_to_diff,
vars_to_4_ma = temp_vars_to_ma) %>%
select("date","gdp_yoy",all_of(unlist(temp_part,use.names = FALSE))) %>%
filter(complete.cases(.))
temp_forecast_df = get_gar_forecast(partitions_list = temp_part,
vars_df = temp_processed_df,
target_var_name = "gdp_yoy",
horizon_list = c(12),
quantile_vec = c(0.1,0.25,0.5,0.75,0.95))
temp_r2 = quantile_r2_score(forecast_df = temp_forecast_df,
actual_df = global_actual_df,
benchmark_df = global_benchmark_df)
benchmark_r2 = scores_df %>%
filter(id == id[temp_ind]) %>%
select(horizon, quantile, quantile_r2)
print(all.equal(temp_r2, benchmark_r2))
best_thresholds
str_subset(ls(), "temp")
rm(str_subset(ls(), "temp"))
rm(ls(pattern = "temp"))
rm(list = ls(pattern = "temp"))
rm(list = ls(pattern = "temp"), benchmark_r2)
rm(list = ls(pattern = "temp"), benchmark_r2, ind_vec)
best_thresholds = scores_df %>%
group_by(quantile) %>%
summarise(threshold = quantile(quantile_r2, 0.98), .groups = "drop")
best_thresholds
best_models = scores_df %>%
group_by(quantile) %>%
mutate(best_model_ind = if_else(quantile_r2 >= quantile(quantile_r2,0.98),
1,0)) %>%
ungroup() %>%
group_by(id) %>%
summarise(best_model_total = sum(best_model_ind)) %>%
filter(best_model_total == 5)
best_models
scores_df %>%
filter(id %in% best_models$id)
best_models = scores_df %>%
group_by(quantile) %>%
mutate(best_model_ind = if_else(quantile_r2 >= quantile(quantile_r2,0.95),
1,0)) %>%
ungroup() %>%
group_by(id) %>%
summarise(best_model_total = sum(best_model_ind)) %>%
filter(best_model_total == 5)
best_models %>%
select(id)
best_models %>%
select(id) %>%
distinct()
best_models %>%
select(id) %>%
mutate(len_id = nchar(id))
best_models %>%
select(id) %>%
mutate(len_id = nchar(id)) %>%
count(len_id)
