convert_to_percent_units = TRUE
),
expected = gar_data %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(yoy = ~(./ lag(., 4) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(., mean, .before = 3,
.complete = TRUE) * 100)))
)
})
gar_data %>%
preprocess_df(
vars_to_yoy = c("gdp", "ind_prod_israel"),
vars_to_percent_change = c("gdp", "ind_prod_israel"),
vars_to_diff = c("gdp", "ind_prod_israel"),
vars_to_4_ma = c("gdp", "ind_prod_israel"),
convert_to_percent_units = TRUE
)
debugonce(preprocess_df)
gar_data %>%
preprocess_df(
vars_to_yoy = c("gdp", "ind_prod_israel"),
vars_to_percent_change = c("gdp", "ind_prod_israel"),
vars_to_diff = c("gdp", "ind_prod_israel"),
vars_to_4_ma = c("gdp", "ind_prod_israel"),
convert_to_percent_units = TRUE
)
vars_to_yoy
vars_to_diff
debugonce(preprocess_df)
gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
debugonce(preprocess_df)
gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
partitions_list
args(preprocess_df)
partition_list = list(first = c("gdp_yoy", "ind_prod_israel_yoy"),
second = c("gdp_percent_change",
"ind_prod_israel_percent_change"),
third = c("gdp_diff", "ind_prod_israel_diff"),
fourth = c("gdp_4_ma", "ind_prod_israel_4_ma"))
debugonce(preprocess_df)
gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
is_null(vars_to_yoy)
is.null(partitions_list)
args_list
names(args_list)
temp_name = names(args_list)[1]
length(args_list[[temp_name]])
length(args_list[[temp_name]]) > 0
assign(temp_name, args_list[[temp_name]],pos = 1)
assign(temp_name, args_list[[temp_name]])
assign(temp_name, args_list[[temp_name]],pos = 1)
devtools::load_all(".")
test_that("all preprocess transformations work with partition list", {
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
),
expected = gar_data %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(yoy = ~(./ lag(., 4) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(., mean, .before = 3,
.complete = TRUE) * 100)))
)
})
gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
partition_list
debugonce(preprocess_df)
gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
args_list
devtools::load_all(".")
test_that("all preprocess transformations work with partition list", {
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
),
expected = gar_data %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(yoy = ~(./ lag(., 4) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(., mean, .before = 3,
.complete = TRUE) * 100)))
)
})
gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
temp = gar_data %>%
preprocess_df(
vars_to_yoy = c("gdp", "ind_prod_israel"),
vars_to_percent_change = c("gdp", "ind_prod_israel"),
vars_to_diff = c("gdp", "ind_prod_israel"),
vars_to_4_ma = c("gdp", "ind_prod_israel"),
convert_to_percent_units = TRUE
)
temp2 = gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
names(temp)
names(temp2)
setdiff(names(temp), names(temp2))
names(temp2)
extract_preprocess_arguments(partition_list)
devtools::load_all(".")
test_that("all preprocess transformations work with partition list", {
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
),
expected = gar_data %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(yoy = ~(./ lag(., 4) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(., mean, .before = 3,
.complete = TRUE) * 100)))
)
})
temp2 = gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
)
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_diff = c("rate_euro","rate_us"),
vars_to_ma = character(0))
test_that("extract_preprocess_arguments works", {
expect_equal(expected_arguments_list,
extract_preprocess_arguments(temp_part))
})
devtools::load_all(".")
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_diff = c("rate_euro","rate_us"),
vars_to_ma = character(0))
test_that("extract_preprocess_arguments works", {
expect_equal(expected_arguments_list,
extract_preprocess_arguments(temp_part))
})
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_diff = c("rate_euro","rate_us"),
vars_to_ma = NULL)
test_that("extract_preprocess_arguments works", {
expect_equal(expected_arguments_list,
extract_preprocess_arguments(temp_part))
})
extract_preprocess_arguments(temp_part)
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_diff = c("rate_euro","rate_us"),
vars_to_4_ma = NULL)
test_that("extract_preprocess_arguments works", {
expect_equal(expected_arguments_list,
extract_preprocess_arguments(temp_part))
})
extract_preprocess_arguments(temp_part)
devtools::load_all(".")
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_diff = c("rate_euro","rate_us"),
vars_to_4_ma = NULL)
test_that("extract_preprocess_arguments works", {
expect_equal(expected_arguments_list,
extract_preprocess_arguments(temp_part))
})
extract_preprocess_arguments(temp_part)
partition_list = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
vars_to_yoy = partition_list %>%
unlist() %>%
str_subset(pattern = "_yoy") %>%
str_remove_all(pattern = "_yoy")
vars_to_percent_change = partition_list %>%
unlist() %>%
str_subset(pattern = "_percent_change") %>%
str_remove_all(pattern = "_percent_change")
vars_to_diff = partition_list %>%
unlist() %>%
str_subset(pattern = "_diff") %>%
str_remove_all(pattern = "_diff")
vars_to_4_ma = partition_list %>%
unlist() %>%
str_subset(pattern = "_4_ma") %>%
str_remove_all(pattern = "_4_ma")
result_list = list(vars_to_yoy = vars_to_yoy,
vars_to_percent_change = vars_to_percent_change,
vars_to_diff = vars_to_diff,
vars_to_4_ma = vars_to_4_ma)
result_list
temp = map(result_list,~if_else(length(.) == 0), NULL,.)
temp = map(result_list,~if_else(length(.) == 0, NULL,.))
map(result_list,print)
walk(result_list,print)
map(result_list,~length(.))
map(result_list,~length(.) == 0)
map(result_list,function(temp_part){
if(length(temp_part) > 0){
return(temp_part)
} else {
return(NULL)
}
})
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
data("gar_data")
gar_data = gar_data %>%
dplyr::mutate(date = as.yearqtr(date))
test_that("all preprocess transformations work", {
expect_equal(
object = gar_data %>%
preprocess_df(
vars_to_yoy = c("gdp", "ind_prod_israel"),
vars_to_percent_change = c("gdp", "ind_prod_israel"),
vars_to_diff = c("gdp", "ind_prod_israel"),
vars_to_4_ma = c("gdp", "ind_prod_israel"),
convert_to_percent_units = TRUE
),
expected = gar_data %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(yoy = ~(./ lag(., 4) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(., mean, .before = 3,
.complete = TRUE) * 100)))
)
})
partition_list = list(first = c("gdp_yoy", "ind_prod_israel_yoy"),
second = c("gdp_percent_change",
"ind_prod_israel_percent_change"),
third = c("gdp_diff", "ind_prod_israel_diff"),
fourth = c("gdp_4_ma", "ind_prod_israel_4_ma"))
test_that("all preprocess transformations work with partition list", {
expect_equal(
object = gar_data %>%
preprocess_df(partitions_list = partition_list,
convert_to_percent_units = TRUE
),
expected = gar_data %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(yoy = ~(./ lag(., 4) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(percent_change = ~ (. / lag(.) - 1) * 100))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(diff = ~ c(NA, diff(.))))) %>%
dplyr::mutate(across(c("gdp", "ind_prod_israel"),
list(`4_ma` = ~ slide_dbl(., mean, .before = 3,
.complete = TRUE) * 100)))
)
})
expect_error(gar_data %>%
dplyr::select(gdp) %>%
preprocess_df(vars_to_yoy = c("gdp","ind_prod_israel")),
"date variable is missing")
expect_warning(gar_data %>%
dplyr::select(date, gdp) %>%
preprocess_df(vars_to_yoy = c("gdp","ind_prod_israel")),
"The following variables are missing : ind_prod_israel")
expect_warning(gar_data %>%
dplyr::select(date, gdp) %>%
preprocess_df(vars_to_diff = c("gdp","ind_prod_israel")),
"The following difference variables are missing : ind_prod_israel")
expect_warning(gar_data %>%
dplyr::select(date, gdp) %>%
preprocess_df(vars_to_4_ma = c("gdp","ind_prod_israel")),
"The following moving average variables are missing : ind_prod_israel")
test_check()
test()
devtools::test()
devtools::test()
devtools::load_all(".")
source("~/GaRPackg/tests/testthat/test-process_functions-extract_preprocess_arguments.R", echo=TRUE)
temp_part = list(dom_macro = c("gdp_yoy","cpi_israel_yoy"),
dom_fin = c("credit_yoy"),
ext_fin = c("rate_euro_diff","rate_us_diff"))
extract_preprocess_arguments(temp_part)
expected_arguments_list = list(vars_to_yoy = c("gdp","cpi_israel",
"credit"),
vars_to_diff = c("rate_euro","rate_us"),
vars_to_4_ma = NULL)
expected_arguments_list
extract_preprocess_arguments(temp_part)
source("~/GaRPackg/tests/testthat/test-process_functions-extract_preprocess_arguments.R", echo=TRUE)
source("~/GaRPackg/tests/testthat/test-process_functions-extract_preprocess_arguments.R", echo=TRUE)
source("~/GaRPackg/tests/testthat/test-process_functions-preprocess_df.R", echo=TRUE)
devtools::test()
test_df = data.frame(date = seq.Date(from = as.Date("2000-01-01"),
to = as.Date("2008-01-01"),
by = "year"), X = 1:9)
out_vec =  c(((test_df$X[5:9]/ test_df$X[1:5]) - 1), rep(NA,4))
testthat::expect_equal(calculate_CAGR(test_df,4),
data.frame(date = test_df$date, X = out_vec))
library(GaRPackg)
final_df = gar_data %>%
select(date, gdp) %>%
preprocess_df(vars_to_yoy = "gdp",
vars_to_percent_change = "gdp",
vars_to_diff = "gdp")
# Chunk 1: load_libraries
library(tidyverse)
devtools::load_all()
library(furrr)
# Chunk 2: Import_data
raw_df = import_from_fame_template(
paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI\\GaR_Data",
"\\robustness\\data_GaR_20220904.csv")) %>%
rename_all(tolower)
raw_df = raw_df %>%
select(-starts_with("staff"), -starts_with("dsge"))
raw_df = raw_df %>%
filter(date >= as.yearqtr("2000 Q1") & date <= as.yearqtr("2022 Q2"))
scores_df = read_csv(paste0(Sys.getenv("USERPROFILE"),
"\\OneDrive - Bank Of Israel\\Data\\BoI",
"\\GaR_Data\\robustness\\scores.csv"),
show_col_types = FALSE) %>%
select(-partition)
best_models = scores_df %>%
group_by(quantile) %>%
mutate(best_model_ind = if_else(quantile_r2 >= quantile(quantile_r2,0.965),
1,0)) %>%
ungroup() %>%
group_by(id) %>%
summarise(best_model_total = sum(best_model_ind)) %>%
filter(best_model_total == 5)
temp_id = best_models %>%
slice(1) %>%
pull(id) %>%
str_split(pattern = "-")
get_vars = function(str_vec, id_str){
map_chr(str_vec, ~function(temp_str){
browser()
if(str_detect(id_str,temp_str)){
return(temp_str)
}
})
}
map(categories_list, function(temp_part){
temp_part = unlist(temp_part, use.names = FALSE)
return(get_vars(temp_part,id_str = temp_id))
})
categories_list = list(
dom_macro = list(
required = c("gdp_yoy"),
optional = c(
"unemployment_diff",
"cpi_israel_yoy"
)),
dom_fin = list(
required = c(
"credit_yoy",
"house_price_yoy",
"ta125_close_yoy",
"boi_rate_diff"
),
optional = c(
"spread_cpi_corp",
"sovereigh_spread",
"term_spread",
"ils_usd_impl_vol",
"ta_35_impl_vol"
)),
ext_macro = list(
required = c(
"gdp_us_yoy",
"gdp_euro_yoy"
),
optional = c(
"cpi_us_yoy",
"infl_euro_4_ma",
"ind_prod_us_yoy",
"ind_prod_euro_yoy",
"oecd_imp"
)),
ext_fin = list(
required = c(
"rate_euro_diff",
"rate_us_diff"
),
optional = c(
"eurostoxx600",
"sp500",
"us_term_spread",
"dxy_yoy",
"oil_p_yoy",
"non_energy_p_yoy"
)
)
)
category_params_df =  categories_list%>%
enframe(name = "category", value = "params") %>%
mutate(part_comb_df = map2(category, params,
function(temp_name, temp_part) {
temp_part_df = get_partition_combs(partitions_list = temp_part,
partition_name = temp_name)
}))
feature_select_df = map(
category_params_df$category,function(temp_cat){
temp_df = category_params_df %>%
filter(category == temp_cat) %>%
select(part_comb_df) %>%
unnest(cols = c(part_comb_df))
return(temp_df)
}
) %>%
reduce(full_join, by = character()) %>%
unite(col = name,starts_with("name"),sep = "-") %>%
mutate(partition = pmap(list(dom_macro,dom_fin,ext_macro,ext_fin),c))
map(categories_list, function(temp_part){
temp_part = unlist(temp_part, use.names = FALSE)
return(get_vars(temp_part,id_str = temp_id))
})
map_lgl(categories_list$dom_macro, ~ str_detect(pattern = .,
string = temp_id))
unlist(categories_list$dom_macro, use.names = FALSE)
temp_id
map(categories_list, function(temp_part){
temp_part = unlist(temp_part, use.names = FALSE)
return(get_vars(temp_part,id_str = temp_id))
})
temp_part = categories_list$dom_macro
temp_part
unlist(temp_part, use.names = FALSE)
temp_part = unlist(temp_part, use.names = FALSE)
temp_part
temp_id
debugonce(get_vars)
get_vars(temp_part,id_str = temp_id)
str_vec = temp_part
id_str = temp_id
map_chr(str_vec, ~function(temp_str){
browser()
if(str_detect(string = id_str,pattern = temp_str)){
return(temp_str)
}
})
temp_str = str_vec[1]
str_detect(string = id_str,pattern = temp_str)
id_str
temp_str
id_str[1]
id_str[[1]]
str_detect(string = id_str[[1]],pattern = temp_str)
str_vec
id_str
unlist(id_str)
str_detect(string = unlist(id_str),pattern = temp_str)
temp_str %in% unlist(id_str)
get_vars = function(str_vec, id_str){
map_chr(str_vec, ~function(temp_str){
if(temp_str %in% unlist(id_str)){
return(temp_str)
}
})
}
map(categories_list, function(temp_part){
temp_part = unlist(temp_part, use.names = FALSE)
return(get_vars(temp_part,id_str = temp_id))
})
