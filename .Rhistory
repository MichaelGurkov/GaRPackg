win_type_expanding = win_type_expanding)
View(prediction_df)
prediction_df %>%
filter(complete.cases())
prediction_df %>%
filter(complete.cases(.))
prediction_df %>%
filter(!complete.cases(.))
temp = prediction_df %>%
filter(complete.cases(.))
temp %>%
filter(!complete.cases(.))
temp %>%
rbind(temp %>%
filter(!complete.cases(.)))
temp %>%
filter(complete.cases(.)) %>%
rbind(temp %>%
filter(!complete.cases(.)))
source("C:/Users/internet/Downloads/EquityAtRisk_test.R", echo=TRUE)
warnings()
View(OS_forecast)
unique(OS_forecast$quantile)
cross(c(1,2), c(3,4))
tibble(x = c(1,2), y = c(3,4))
tibble(x = c(1,2), y = c(3,4)) %>%
crossing(x,y)
?crossing()
tibble(x = c(1,2), y = c(3,4)) %>%
crossing(y)
tibble(x = c(1,2), y = c(3,4)) %>%
crossing()
tibble(x = c(1,2), y = c(3,4)) %>%
expand()
temp_df = tibble(x = c(1,2), y = c(3,4))
temp_df
expand(temp_df)
temp_df %>% expand(x)
temp_df %>% expand(x, y)
temp_df = tibble(x = c(1,2), y = c(3,4)) %>%
expand(x,y)
temp_df
source("C:/Users/internet/Downloads/EquityAtRisk_test.R", echo=TRUE)
devtools::load_all("~/GaRPackg")
source("C:/Users/internet/Downloads/EquityAtRisk_test.R", echo=TRUE)
devtools::load_all("~/GaRPackg")
OS_forecast=get_gar_forecast(
partitions_list=partitions_list_ear,
vars_df=ear_data,
target_var_name="Eq_Premium",
horizon_list=4,
quantile_vec=c(0.1,0.25,0.5,0.75,0.9),
preprocess_method = "pca",
win_len = 134,
win_type_expanding = TRUE
)
View(OS_forecast)
OS_forecast = OS_forecast %>%
arrange(date)
View(OS_forecast)
devtools::check()
devtools::test()
source("~/GaRPackg/tests/testthat/test-cross_validation_functions-get_gar_forecast.R", echo=TRUE)
devtools::load_all("~/GaRPackg")
data("gar_data")
gar_data = gar_data %>% dplyr::slice(1:31)
test_params = list()
test_params$target_var_name = "gdp"
test_params$horizon_list = list(1,4)
test_params$quantile_vec = c(0.5)
test_params$win_len = 30
test_params$win_type_expanding = TRUE
test_pred_df = suppressWarnings(run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = gar_data,
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = test_params$win_type_expanding) %>%
arrange(date,horizon,quantile) %>%
mutate(forecast_target_date = date + as.numeric(horizon) / 4) %>%
relocate("forecast_target_date",.after = "forecast_values"))
test_pred_df = suppressWarnings(run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = gar_data,
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = test_params$win_type_expanding) %>%
arrange(date,horizon,quantile) %>%
mutate(forecast_target_date = date + as.numeric(horizon) / 4) %>%
relocate("forecast_target_date",.after = "forecast_values"))
debugonce(run_cross_validation)
test_pred_df = suppressWarnings(run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = gar_data,
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = test_params$win_type_expanding) %>%
arrange(date,horizon,quantile) %>%
mutate(forecast_target_date = date + as.numeric(horizon) / 4) %>%
relocate("forecast_target_date",.after = "forecast_values"))
temp_split = roll_cv_list$splits[[1]]
analysis_set = make_quant_reg_df(
partitions_list = partitions_list,
vars_df = analysis(temp_split),
target_var_name = target_var_name,
horizon_list = horizon_list,
pca.align.list = pca.align.list,
preprocess_method = preprocess_method,
return_objects_list = FALSE
)
analysis_set = analysis_set[["reg_df"]]
assessment_set = analysis_set %>%
dplyr::slice(n())
forecast_date = analysis(temp_split)[nrow(analysis(temp_split)),
"date"][[1,1]]
nrow(analysis(temp_split)
)
analysis(temp_split)[nrow(analysis(temp_split)),
"date"]
analysis(temp_split)[nrow(analysis(temp_split)),
"date"][[1,1]]
forecast_date = analysis(temp_split)
devtools::load_all("~/GaRPackg")
debugonce(run_cross_validation)
source("C:/Users/internet/Downloads/EquityAtRisk_test.R", echo=TRUE)
debugonce(run_cross_validation)
OS_forecast=get_gar_forecast(
partitions_list=partitions_list_ear,
vars_df=ear_data,
target_var_name="Eq_Premium",
horizon_list=4,
quantile_vec=c(0.1,0.25,0.5,0.75,0.9),
preprocess_method = "pca",
win_len = 134,
win_type_expanding = TRUE
)
temp_split = roll_cv_list$splits[1]
analysis_set = make_quant_reg_df(
partitions_list = partitions_list,
vars_df = analysis(temp_split),
target_var_name = target_var_name,
horizon_list = horizon_list,
pca.align.list = pca.align.list,
preprocess_method = preprocess_method,
return_objects_list = FALSE
)
analysis_set = analysis_set[["reg_df"]]
assessment_set = analysis_set %>%
dplyr::slice(n())
analysis(temp_split)[nrow(analysis(temp_split)),
"date"][[1,1]]
analysis(temp_split)
analysis(temp_split)
temp_split
analysis(temp_split)
analysis_set = make_quant_reg_df(
partitions_list = partitions_list,
vars_df = analysis(temp_split),
target_var_name = target_var_name,
horizon_list = horizon_list,
pca.align.list = pca.align.list,
preprocess_method = preprocess_method,
return_objects_list = FALSE
)
temp_split = roll_cv_list$splits[[1]]
analysis_set = make_quant_reg_df(
partitions_list = partitions_list,
vars_df = analysis(temp_split),
target_var_name = target_var_name,
horizon_list = horizon_list,
pca.align.list = pca.align.list,
preprocess_method = preprocess_method,
return_objects_list = FALSE
)
analysis_set = analysis_set[["reg_df"]]
assessment_set = analysis_set %>%
dplyr::slice(n())
analysis(temp_split)[nrow(analysis(temp_split)),
"date"][[1,1]]
forecast_date = analysis(temp_split)[nrow(analysis(temp_split)),
"date"]
forecast_date = analysis(temp_split)
forecast_date
forecast_date = analysis(temp_split)[nrow(analysis(temp_split)),
"date"]
forecast_date = analysis(temp_split)
devtools::test()
devtools::load_all("~/GaRPackg")
data("gar_data")
one_feature_part = list(
dom_macro = list(
"gdp"
),
fin_cycle = list(
"credit"
)
)
mix_feature_part = list(
dom_macro = list(
"gdp",
"ind_prod_israel"
),
fin_cycle = list(
"credit"
)
)
mult_feature_part = list(
dom_macro = list(
"gdp",
"ind_prod_israel"
),
fin_cycle = list(
"credit","house_price"
)
)
test_mix_pca = gar_data %>%
dplyr::select(date, unlist(mix_feature_part$dom_macro)) %>%
pca_reduction()
test_mix_df = data.frame(
date = test_mix_pca$time_index,
dom_macro = test_mix_pca$pca_obj$x[,1]
) %>%
dplyr::inner_join(
gar_data %>%
dplyr::select(date,credit),
by = "date"
) %>%
dplyr::select(date, credit, dom_macro)
test_multi_df = map_pca_reduction(
multi_feature_partitions = mult_feature_part,
vars_df = gar_data, n_components = 1)
test_that("reduce_data_dimension returns one feature data",
expect_equal(object = reduce_data_dimension(
vars_df = gar_data,
partition_list = one_feature_part)[[1]],
expected = gar_data %>%
dplyr::select(date,unlist(one_feature_part,
use.names = FALSE))
)
)
test_that(paste0("reduce_data_dimension handles mix",
" (one and many feature) partitions"),
expect_equal(
object = reduce_data_dimension(
vars_df = gar_data,
partition_list = mix_feature_part)[[1]],
expected = test_mix_df)
)
test_that("reduce_data_dimension returns multi feature data",
expect_equal(object = reduce_data_dimension(
vars_df = gar_data,
partition_list = mult_feature_part)[[1]],
expected = test_multi_df$xreg_df_multi)
)
test_that(paste0("reduce_data_dimension returns error",
" when partition_list is NULL"),
expect_error(object = reduce_data_dimension(
vars_df = gar_data,
partition_list = NULL))
)
test_that(paste0("reduce_data_dimension returns error",
" when preprocess_method is incorrect"),
expect_error(object = reduce_data_dimension(
vars_df = gar_data,
partition_list = mult_feature_part,
preprocess_method = "inner_join_pca"))
)
test_that(paste0("reduce_data_dimension skips reduction",
" object list with one feature part"),
expect_equal(object = reduce_data_dimension(
vars_df = gar_data,
partition_list = one_feature_part,
return_objects_list = TRUE)[[1]],
expected = gar_data %>%
dplyr::select(date,unlist(one_feature_part, use.names = FALSE)))
)
test_that(paste0("reduce_data_dimension returns error",
" when partition has only missing values"),
expect_error(object = reduce_data_dimension(
vars_df = gar_data %>%
dplyr::mutate(across(unlist(mult_feature_part,
use.names = FALSE),~NA)),
partition_list = mult_feature_part))
)
object = reduce_data_dimension(
vars_df = gar_data %>%
dplyr::mutate(across(unlist(mult_feature_part,
use.names = FALSE),~NA)),
partition_list = mult_feature_part)
object
object
test_that(paste0("reduce_data_dimension returns NA tibble",
" when partition has only missing values"),
expect_equal(object = reduce_data_dimension(
vars_df = gar_data %>%
dplyr::mutate(across(unlist(mult_feature_part,
use.names = FALSE),~NA)),
partition_list = mult_feature_part)[[1]],
gar_data %>%
select(date) %>%
mutate(dom_macro = NA) %>%
mutate(fin_cycle = NA))
)
devtools::test()
data("gar_data")
gar_data = gar_data %>% dplyr::slice(1:31)
test_params = list()
test_params$target_var_name = "gdp"
test_params$horizon_list = list(1,4)
test_params$quantile_vec = c(0.5)
test_params$win_len = 30
test_params$win_type_expanding = TRUE
test_pred_df = suppressWarnings(run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = gar_data,
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = test_params$win_type_expanding) %>%
arrange(date,horizon,quantile) %>%
mutate(forecast_target_date = date + as.numeric(horizon) / 4) %>%
relocate("forecast_target_date",.after = "forecast_values"))
test_that("get_gar_forecast returns proper predictions",
expect_equal(
object = suppressWarnings(get_gar_forecast(
partitions_list = test_params$partition,
vars_df = gar_data,
target_var_name = test_params$target_var,
horizon_list = test_params$horizon_list,
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len) %>%
arrange(date,horizon,quantile)),
expected = test_pred_df))
devtools::load_all("~/GaRPackg")
data("gar_data")
gar_data = gar_data %>% dplyr::slice(1:40)
test_params = list()
test_params$target_var_name = "gdp"
test_params$horizon_list = list(1,4)
test_params$quantile_vec = c(0.5)
test_params$win_len = 30
test_params$partitions_list = list(
macro = c("gdp","ind_prod_israel"),
fin_cycle = c("credit","house_price"))
test_reg_df_30 = make_quant_reg_df(
partitions_list = test_params$partitions_list,
vars_df =  slice(gar_data,1:30),
target_var_name = "gdp",
horizon_list = test_params$horizon_list)[["reg_df"]]
test_reg_df_31 = make_quant_reg_df(
partitions_list = test_params$partitions_list,
vars_df =  slice(gar_data,1:31),
target_var_name = "gdp",
horizon_list = test_params$horizon_list)[["reg_df"]]
test_quant_reg_30 = run_quant_reg(
reg_df = test_reg_df_30,
target_var_name = test_params$target_var_name,
quantile_vec = test_params$quantile_vec,
horizon_list = test_params$horizon_list)
test_quant_reg_31 = run_quant_reg(
reg_df = test_reg_df_31,
target_var_name = test_params$target_var_name,
quantile_vec = test_params$quantile_vec,
horizon_list = test_params$horizon_list)
test_pred_fixed = stats::predict(test_quant_reg_30$`4`,
newdata = test_reg_df_30[30,])
test_pred_expanding = c(stats::predict(test_quant_reg_30$`4`,
newdata = test_reg_df_30[30, ]),
stats::predict(test_quant_reg_31$`4`,
newdata = test_reg_df_31[31, ]))
names(test_pred_fixed) = NULL
names(test_pred_expanding) = NULL
cross_validation_pred_fixed_30 = run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = slice(gar_data,1:30),
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = FALSE)
debugonce(run_cross_validation)
cross_validation_pred_fixed_30 = run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = slice(gar_data,1:30),
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = FALSE)
temp_split = roll_cv_list$splits[[1]]
analysis_set = make_quant_reg_df(
partitions_list = partitions_list,
vars_df = rsample::analysis(temp_split),
target_var_name = target_var_name,
horizon_list = horizon_list,
pca.align.list = pca.align.list,
preprocess_method = preprocess_method,
return_objects_list = FALSE
)
analysis_set = analysis_set[["reg_df"]]
assessment_set = analysis_set %>%
dplyr::slice(n())
forecast_date = rsample::analysis(temp_split) %>%
dplyr::slice(n()) %>%
dplyr::pull(date)
is.na(forecast_date)
!identical(forecast_date, assessment_set$date)
qreg_result = run_quant_reg(
reg_df = analysis_set,
target_var_name = target_var_name,
quantile_vec = quantile_vec,
horizon_list = horizon_list
)
any(purrr::map_lgl(qreg_result,is.null))
temp_predict = purrr::map(names(qreg_result), function(temp_name) {
temp_pred = qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame() %>%
dplyr::rename_all( ~ str_remove(., "tau= ")) %>%
tidyr::pivot_longer(cols = everything(),
names_to = "quantile",
values_to = "forecast_values") %>%
dplyr::mutate(horizon = as.numeric(temp_name)) %>%
dplyr::mutate(quantile = as.numeric(quantile)) %>%
dplyr::mutate(date = assessment_set$date)
if (length(quantile_vec) == 1) {
temp_pred = temp_pred %>%
dplyr::mutate(quantile = as.numeric(quantile_vec))
}
return(temp_pred)
}) %>%
dplyr::bind_rows()
temp_name = names(qreg_result)[1]
temp_pred = qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame() %>%
dplyr::rename_all( ~ str_remove(., "tau= ")) %>%
tidyr::pivot_longer(cols = everything(),
names_to = "quantile",
values_to = "forecast_values") %>%
dplyr::mutate(horizon = as.numeric(temp_name))
temp_pred
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set)
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame() %>%
dplyr::rename_all( ~ str_remove(., "tau= "))
temp_name
qreg_result[[temp_name]]
assessment_set
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set)
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame()
summary(qreg_result)
summary(qreg_result$`1`)
predict(qreg_result, assessment_set)
predict(qreg_result$`1`, assessment_set)
predict(qreg_result$`1`, analysis_set)
predict.rq(qreg_result$`1`, analysis_set)
predict.rq(qreg_result, analysis_set)
predict.rq(qreg_result, assessment_set)
temp_predict
purrr::map(names(qreg_result), function(temp_name) {
temp_pred = qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame() %>%
dplyr::rename_all( ~ str_remove(., "tau= ")) %>%
tidyr::pivot_longer(cols = everything(),
names_to = "quantile",
values_to = "forecast_values")
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame() %>%
dplyr::rename_all( ~ str_remove(., "tau= ")) %>%
tidyr::pivot_longer(cols = everything(),
names_to = "quantile",
values_to = "forecast_values")
length(quantile_vec)
quantile_vec
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame() %>%
# dplyr::rename_all( ~ str_remove(., "tau= ")) %>%
# tidyr::pivot_longer(cols = everything(),
#                     names_to = "quantile",
#                     values_to = "forecast_values") %>%
dplyr::mutate(horizon = as.numeric(temp_name)) %>%
# dplyr::mutate(quantile = as.numeric(quantile)) %>%
dplyr::mutate(date = assessment_set$date)
qreg_result[[temp_name]] %>%
stats::predict(newdata = assessment_set) %>%
as.data.frame()
devtools::load_all("~/GaRPackg")
cross_validation_pred_fixed_30 = run_cross_validation(
partitions_list = test_params$partitions_list,
vars_df = slice(gar_data,1:30),
target_var_name = test_params$target_var_name,
horizon = unlist(test_params$horizon_list),
quantile_vec = test_params$quantile_vec,
win_len = test_params$win_len,
win_type_expanding = FALSE)
devtools::test()
